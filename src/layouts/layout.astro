---
import navLinks from "./nav-links.json";
import regi from '../images/btn-01-a.png';
import { slide } from 'astro:transitions';
import theme from '../images/btn-02-a.png';
import guide from '../images/btn-03-a.png';
import result from '../images/btn-04-a.png';
import logo from '../images/Logo-Animate.png'

---



<div class="relative">
  <!-- <div id="lightbox" aria-label="lightbox" tab-index="0" role="button"
    class="z-20 top-0 left-0 w-screen h-screen bg-custom-background opacity-80"
  >
  </div> -->
  <div class="max-w-8xl mx-auto px-0 sm:px-0 md:px-0">
    <div
      id="sidebar"
      class="lg:block hidden fixed z-30 inset-0 transition-all duration-300 w-[25rem] py-4 px-0 justify-center pt-28"
      style="background:#f70000;"
    >
    

      <div class="px-5">
        
        <img  src={logo.src} alt="regi" decoding="async" />
      </div>
   
      <div class="row-span-1 pt-4 flex items-center justify-center"><ul>
        <li class="text-red-300"><a href="/register" class="flex-1 border-indigo-600 items-center justify-center rounded-md overflow-hidden">
    
          <img class="hover:opacity-100 opacity-75 hover:shadow-none shadow-md shadow-cyan-500/50" src={regi.src} alt="regi" decoding="async" />
          <!-- <img src="../images/register.png" alt="Image 1" class="w-1/4 w-25"> -->
      
          
        </a></li>
      </ul>
      <!-- <ul>
      <li class="text-red-300"><a href="/register" class="flex-1 card border-indigo-600 items-center justify-center rounded-md overflow-hidden">
  
        <img class="hover:brightness-100 brightness-75 mr-1" src={theme.src} alt="regi" decoding="async" />
      
    
        
      </a></li>
    </ul>
    <ul>
      <li class="text-red-300"><a href="/register" class="flex-1 card border-indigo-600 items-center justify-center rounded-md overflow-hidden">
  
        <img class="hover:brightness-100 brightness-75 mr-1" src={guide.src} alt="guide" decoding="async" />
        
    
        
      </a></li>
    </ul>
    <ul>
      <li class="text-red-300"><a href="/result" class="flex-1 card border-indigo-600 items-center justify-center rounded-md overflow-hidden">
  
        <img class="hover:brightness-100 brightness-75" color:#6c5353; src={result.src} alt="result" decoding="async" />
       
    
        
      </a></li>
    </ul> -->
    </div>
        <div class="grid grid-rows-4 sm:grid-rows-4 pt-4">
          
          
          <div class="row-span-1">
            <div class="flex items-center justify-center flex-col gap-3 min-[500px]:flex-row">
              <div class="dates items-center" style="color:#e7dacb">
                <p class="important-date flex items-center justify-center text-2xl md:text-left lg:text-2xl"><strong> - Registration starts on -</strong></p>
                <p class="important-date flex items-center justify-center text-2xl md:text-left lg:text-2xl"> 15 March 2024</p>
                
              </div>
            </div></div>
          </div>
        </div>
          
      
   

    <main class="lg:pl-[25rem] ">
     
      <!-- <div class="mx-auto px-0 sm:px-4 lg:px-16 py-8 max-w-none xl:ml-0 xl:mr-[0rem]">   -->
        <div class="flex items-end justify-end">   
<nav class="float-end mb-3 pb-2">
  <div class="mx-auto px-4 lg:px-16 py-8 max-w-none xl:ml-0 xl:mr-[0rem] ">
    <!-- max-w-full flex flex-wrap items-center justify-between mx-auto p-4 -->
    <!-- <button data-collapse-toggle="navbar-default" type="button" class="inline-flex items-center p-2 w-10 h-10 justify-center text-smrounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false" > -->
      <button class='inline-flex items-center justify-center md:hidden' data-collapse-toggle="navbar-default" type="button" aria-controls="navbar-default" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 17 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h15M1 7h15M1 13h15"/>
        </svg>
    </button>
    <div class="hidden w-full items-end md:block menu-item" id="main-navigation">
      <ul class="menu items-end justify-end bebas-neue-regular">
        {
          navLinks.map((link) => {
            const { label, href } = link;

            return (
              <li>
                <a class="nav-link text-brown-300 hover:text-red-600 transition duration-300" href={href}>{label}</a>
              </li>
            );
          })
        }
      </ul>
      <!-- <ul class="font-medium flex flex-col p-4 md:p-0 mt-4 border border-gray-100 rounded-lg bg-gray-50 md:flex-row md:space-x-8 rtl:space-x-reverse md:mt-0 md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
        <li>
          <a href="#" class="block py-2 px-3 text-white bg-blue-700 rounded md:bg-transparent md:text-blue-700 md:p-0 dark:text-white md:dark:text-blue-500" aria-current="page">Home</a>
        </li>
        <li>
          <a href="#" class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent">About</a>
        </li>
        <li>
          <a href="#" class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent">Services</a>
        </li>
        <li>
          <a href="#" class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent">Pricing</a>
        </li>
        <li>
          <a href="#" class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent">Contact</a>
        </li>
      </ul> -->
    </div>
  </div>
</nav>
</div>
      <div
      
      class="lg:hidden sm:block rounded-t-lg mx-1 px-1"
      style="background:#f70000;"
    >
      <!-- <nav> -->
        <div class="grid my-auto grid-rows-1 sm:grid-rows-3">
          <div class="row-span-1"><div class="pt-5 px-5">
        
            <img  src={logo.src} alt="regi" decoding="async" />
          </div></div>
         
         
        </div>
        <div class="flex items-center justify-center"><ul class="">
          <li class="text-red-300"><a href="/register" class="flex-1 border-indigo-600 items-center justify-center rounded-md overflow-hidden">
      
            <img class="hover:opacity-100 opacity-75 hover:shadow-none shadow-md shadow-red-500/50" src={regi.src} alt="regi" decoding="async" />
            <!-- <img src="../images/register.png" alt="Image 1" class="w-1/4 w-25"> -->
        
            
          </a></li>
        </ul></div>
        <div class="row-span-1 bg-red-500"> <div class="dates items-center" style="color:#e7dacb">
          <p class="important-date flex items-center justify-center text-2xl md:text-left lg:text-2xl"><strong> - Registration starts on -</strong></p>
          <p class="important-date flex items-center justify-center text-2xl md:text-left lg:text-2xl"> 15 March 2024</p>
          
        </div></div>
      <!-- </nav> -->
    </div>
  <!-- </div> -->

    <div class="mx-auto px-4 lg:px-16 py-8 max-w-none xl:ml-0 xl:mr-[0rem]"
    transition:animate={slide({ duration: '0.4s' })}>
        <slot />
      </div>
    </main>
  </div>
</div>
<style>
  nav,
  ul {
    margin-bottom: 5px;
    display: inline-block;
    font-size: larger;

  }

  ul.menu li {
    display: inline-block;
    border-right: 2px solid rgb(156, 3, 3);
    border-style: inset;
    list-style: none;
    padding: 0px 8px;
  }
  ul.menu li a{
  text-decoration: none;
  color:#6c5353;
}
ul.menu li a:hover{
  color:red;
}
.menu-item a.active{
  color:#f70000 !important;
  /* background-color: blue; */
}
ul.menu li:last-child{  
  border-right: none;
}
/* ul.menu li:hover, */
/* a.active {color: aqua;} */
ul.menu li a.active{
  color:#f70000;
}
</style>

<script>
 
  document.addEventListener('astro:page-load', () =>{

  var currentUrl = window.location.pathname;


  var menuItems = document.querySelectorAll('.nav-link');
// console.log(menuItems);
 
  menuItems.forEach(function(item) {
   
    var menuItemUrl = item.getAttribute('href');

    // Check if the current URL matches the menu item's href
    if (currentUrl === menuItemUrl) {
      // Add the 'active' class to the matching menu item
      item.classList.add('active');
    } else {
      // Remove the 'active' class from other menu items
      item.classList.remove('active');
    }
  });
});




</script>
<script>

document.addEventListener('astro:page-load', () => {
    // variables
    const mainNav = document.querySelector('#main-navigation')
    const mainMenu = mainNav.querySelector('ul')
    const dropdownMenus = [...document.querySelectorAll('.has-dropdown button')]

    // functions
    const setActiveMenuItem = () => {
      const mobileDesktopMenus = mainNav.querySelectorAll('nav > ul')
      const currenPathname = window.location.pathname + window.location.hash

      mobileDesktopMenus.forEach((menu) => {
        const menuItems = [...menu.querySelectorAll('a:not([rel*="external"])')] as HTMLAnchorElement[]

        menuItems.forEach((menuItem) => {
          /*if (currenPathname.includes(menuItem.pathname.replaceAll('/', '')) && menuItem.textContent !== 'Home' && menuItem.hash.length === 0)  {*/
          if (currenPathname.includes((menuItem.pathname + menuItem.hash).replaceAll('/', '')) && menuItem.textContent !== 'Home' ) {
            menuItem.classList.add('is-active')
            menuItem.setAttribute('aria-current', 'page')
          } else if (menuItem.textContent === 'Home' && currenPathname === '/') {
            menuItem.classList.add('is-active')
            menuItem.setAttribute('aria-current', 'page')
          }
        })
      })
    }

    // start
    const mobileDesktopMenus = mainNav.querySelectorAll('nav > ul')

    mobileDesktopMenus.forEach((menu) => {
      menu.addEventListener('click', function (event) {
        const menuItems = [...menu.querySelectorAll('a:not([rel*="external"])')] as HTMLAnchorElement[]
        menuItems.forEach((menuItem) => {
          menuItem.classList.remove('is-active')
        })

        const target = event.target
        if (target.tagName === 'A' && target.hash) {
          target.classList.add('is-active')
        }
      })
    })
    // end

    const checkMenuSize = () => {
      const mainNavWidth = mainNav.getBoundingClientRect().width
      const desktopMenuWidth = document.querySelector('.desktop-menu').getBoundingClientRect().width
      const logoWidthBuffer = 300
      const totalMenuWidth = Math.round(desktopMenuWidth) + logoWidthBuffer

      if (totalMenuWidth >= mainNavWidth) {
        mainNav.classList.remove('is-desktop')
        mainNav.classList.add('is-mobile')
      } else if (totalMenuWidth <= mainNavWidth) {
        mainNav.classList.add('is-desktop')
        mainNav.classList.remove('is-mobile')
      }
    }

    const isOutOfViewport = (element) => {
      const elementBounds = element.getBoundingClientRect()
      return elementBounds.right > (window.innerWidth || document.documentElement.clientWidth)
    }

    const openDropdownMenu = (dropdownMenu) => {
      const dropdownList = dropdownMenu.parentNode.querySelector('ul')

      dropdownMenu.classList.add('show')
      dropdownMenu.setAttribute('aria-expanded', 'true')

      if (isOutOfViewport(dropdownList)) {
        dropdownList.style.left = 'auto'
      }
    }

    const closeDropdownMenu = (dropdownMenu) => {
      dropdownMenu.classList.remove('show')
      dropdownMenu.setAttribute('aria-expanded', 'false')
    }

    const closeAllDropdownMenus = () => {
      for (let i = 0; i < dropdownMenus.length; i++) {
        closeDropdownMenu(dropdownMenus[i])
      }
    }

    const toggleDropdownMenu = (event) => {
      if (event.target.getAttribute('aria-expanded') === 'false') {
        closeAllDropdownMenus()
        openDropdownMenu(event.target)
      } else {
        closeDropdownMenu(event.target)
      }
    }

    // execution
    mainMenu &&
      mainMenu.addEventListener('keydown', (event) => {
        const element = event.target as Element
        const currentMenuItem = element.closest('li')
        const menuItems = [...mainMenu.querySelectorAll('.menu-item')]
        const currentDropdownMenu = element.closest('.has-dropdown button')
        const currentDropdownMenuItem = element.closest('.has-dropdown li')
        const currentIndex = menuItems.findIndex((item) => item === currentMenuItem)

        const key = event.key
        let targetItem

        if (key === 'ArrowRight') {
          if (menuItems.indexOf(currentMenuItem) === menuItems.length - 1) {
            targetItem = menuItems[0]
          } else {
            targetItem = menuItems[currentIndex + 1]
          }
        }

        if (key === 'ArrowLeft') {
          if (menuItems.indexOf(currentMenuItem) === 0) {
            targetItem = menuItems[menuItems.length - 1]
          } else {
            targetItem = menuItems[currentIndex - 1]
          }
        }

        if (key === 'Escape') {
          targetItem = menuItems[0]
        }

        if (currentDropdownMenu) {
          const firstDropdownItem = currentDropdownMenu.nextElementSibling.querySelector('li')

          if (key === 'ArrowDown') {
            event.preventDefault()
            openDropdownMenu(currentDropdownMenu)
            targetItem = firstDropdownItem
          }

          if (key === 'Escape') {
            closeDropdownMenu(currentDropdownMenu)
          }
        }

        if (currentDropdownMenuItem) {
          const currentDropdownList = currentDropdownMenuItem.parentNode
          const dropdownMenuItems = [...currentDropdownList.querySelectorAll('li')]
          const currentIndex = dropdownMenuItems.findIndex((item) => item === currentDropdownMenuItem)

          if (key === 'ArrowDown') {
            event.preventDefault()

            if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === dropdownMenuItems.length - 1) {
              targetItem = dropdownMenuItems[0]
            } else {
              targetItem = dropdownMenuItems[currentIndex + 1]
            }
          }

          if (key === 'ArrowUp') {
            event.preventDefault()

            if (dropdownMenuItems.indexOf(currentDropdownMenuItem as HTMLLIElement) === 0) {
              targetItem = dropdownMenuItems[dropdownMenuItems.length - 1]
            } else {
              targetItem = dropdownMenuItems[currentIndex - 1]
            }
          }

          if (key === 'Escape') {
            const currentDropdownMenu = (currentDropdownList as Element).previousElementSibling
            targetItem = currentDropdownMenu.parentNode
            closeAllDropdownMenus()
          }
        }

        if (targetItem) {
          targetItem.querySelector('a, button, input').focus()
        }
      })

    dropdownMenus &&
      dropdownMenus.forEach((dropdownMenu) => {
        dropdownMenu.addEventListener('click', toggleDropdownMenu)
      })

    setActiveMenuItem()
    checkMenuSize()

    window.addEventListener('resize', checkMenuSize)
    window.addEventListener('click', (event) => {
      const element = event.target as Element
      if (!element.hasAttribute('aria-haspopup') && !element.classList.contains('submenu-item')) {
        closeAllDropdownMenus()
      }
    })
  })






  
</script>